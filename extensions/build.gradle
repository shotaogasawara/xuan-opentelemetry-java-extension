plugins {
  id "java"

  /*
  Instrumentation agent extension mechanism expects a single jar containing everything required
  for your extension. This also includes any external libraries that your extension uses and
  cannot access from application classpath (see comment below about `javax.servlet-api` dependency).

  Thus we use Shadow Gradle plugin to package our classes and all required runtime dependencies
  into a single jar.
  See https://imperceptiblethoughts.com/shadow/ for more details about Shadow plugin.
   */
  id "com.github.johnrengelman.shadow" version "8.1.1"
  id "com.diffplug.spotless" version "6.18.0"

  id "io.opentelemetry.instrumentation.muzzle-generation" version "1.26.0-alpha"
  id "io.opentelemetry.instrumentation.muzzle-check" version "1.26.0-alpha"
}

group 'com.kaipoke'
version '1.0'

ext {
  versions = [
    opentelemetrySdk           : "1.26.0",
    opentelemetryJavaagent     : "1.26.0",
    opentelemetryJavaagentAlpha: "1.26.0-alpha",
  ]

  deps = [
    autoservice: dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1')
  ]
}

repositories {
  mavenCentral()
}

spotless {
  java {
    googleJavaFormat()
    target("src/**/*.java")
  }
}

dependencies {
  implementation(platform("io.opentelemetry:opentelemetry-bom:${versions.opentelemetrySdk}"))

  // these serve as a test of the instrumentation boms
  implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${versions.opentelemetryJavaagent}"))
  implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${versions.opentelemetryJavaagentAlpha}"))

  // servletの参照に必要になるので追加
  implementation("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-5.0:${versions.opentelemetryJavaagentAlpha}")
  implementation("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-common-bootstrap:${versions.opentelemetryJavaagentAlpha}")

  /*
  Interfaces and SPIs that we implement. We use `compileOnly` dependency because during
  runtime all necessary classes are provided by javaagent itself.
   */
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api")
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap:${versions.opentelemetryJavaagentAlpha}")

  //Provides @AutoService annotation that makes registration of our SPI implementations much easier
  compileOnly deps.autoservice
  annotationProcessor deps.autoservice

  /*
   Used by our demo instrumentation module to reference classes of the target instrumented library.
   We again use `compileOnly` here because during runtime these classes are provided by the
   actual application that we instrument.

   NB! Only Advice (and "helper") classes of instrumentation modules can access classes from application classpath.
   See https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/contributing/writing-instrumentation-module.md#advice-classes
   */
  compileOnly group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.0.0'

  //TODO remove when start using io.opentelemetry.instrumentation.javaagent-instrumentation plugin
  add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations-support:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
}

tasks {
  compileJava {
    options.release.set(8)
  }

  assemble.dependsOn(shadowJar)
}
