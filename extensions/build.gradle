plugins {
  id "java"

  /*
  Instrumentation agent extension mechanism expects a single jar containing everything required
  for your extension. This also includes any external libraries that your extension uses and
  cannot access from application classpath (see comment below about `javax.servlet-api` dependency).

  Thus we use Shadow Gradle plugin to package our classes and all required runtime dependencies
  into a single jar.
  See https://imperceptiblethoughts.com/shadow/ for more details about Shadow plugin.
   */
  id "com.github.johnrengelman.shadow" version "8.1.1"
  id "com.diffplug.spotless" version "6.18.0"

  id "io.opentelemetry.instrumentation.muzzle-generation" version "1.26.0-alpha"
  id "io.opentelemetry.instrumentation.muzzle-check" version "1.26.0-alpha"
}

group 'io.opentelemetry.example'
version '1.0'

ext {
  versions = [
    // this line is managed by .github/scripts/update-sdk-version.sh
    opentelemetrySdk           : "1.26.0",

    // these lines are managed by .github/scripts/update-version.sh
    opentelemetryJavaagent     : "1.26.0",
    opentelemetryJavaagentAlpha: "1.26.0-alpha",

    junit                      : "5.9.3"
  ]

  deps = [
    autoservice: dependencies.create(group: 'com.google.auto.service', name: 'auto-service', version: '1.0.1')
  ]
}

repositories {
  mavenCentral()
  maven {
    name = "sonatype"
    url = uri("https://oss.sonatype.org/content/repositories/snapshots")
  }
}

configurations {
  /*
  We create a separate gradle configuration to grab a published Otel instrumentation agent.
  We don't need the agent during development of this extension module.
  This agent is used only during integration test.
  */
  otel
}

// 一旦面倒なのでコメントアウト。後でlint復活させる
// spotless {
//   java {
//     googleJavaFormat()
//     licenseHeaderFile(rootProject.file("../../buildscripts/spotless.license.java"), "(package|import|public)")
//     target("src/**/*.java")
//   }
// }

dependencies {
  implementation(platform("io.opentelemetry:opentelemetry-bom:${versions.opentelemetrySdk}"))

  // these serve as a test of the instrumentation boms
  implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${versions.opentelemetryJavaagent}"))
  implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${versions.opentelemetryJavaagentAlpha}"))


  // // 以下はruntimeの依存関係を参照すると思われるのでcompileonlyで大丈夫なはず
  // implementation("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap:${versions.opentelemetryJavaagentAlpha}")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-bootstrap:${versions.opentelemetryJavaagentAlpha}")
  implementation("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-5.0:${versions.opentelemetryJavaagentAlpha}")
  implementation("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-common-bootstrap:${versions.opentelemetryJavaagentAlpha}")

  // // 以下についてはversionはbomによって調整されるので指定しないほうがよさそう
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api-semconv")

  /*
  Interfaces and SPIs that we implement. We use `compileOnly` dependency because during
  runtime all necessary classes are provided by javaagent itself.
   */
  compileOnly("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
  compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api")
  compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
  // implementation("io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api")
  // compileOnly("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-5.0:${versions.opentelemetryJavaagentAlpha}")
  // compileOnly("io.opentelemetry.javaagent.instrumentation:opentelemetry-javaagent-servlet-common-bootstrap:${versions.opentelemetryJavaagentAlpha}")

  //Provides @AutoService annotation that makes registration of our SPI implementations much easier
  compileOnly deps.autoservice
  annotationProcessor deps.autoservice

  /*
   Used by our demo instrumentation module to reference classes of the target instrumented library.
   We again use `compileOnly` here because during runtime these classes are provided by the
   actual application that we instrument.

   NB! Only Advice (and "helper") classes of instrumentation modules can access classes from application classpath.
   See https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/contributing/writing-instrumentation-module.md#advice-classes
   */
  compileOnly group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.8'
  // compileOnly group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.0.0'

  //TODO remove when start using io.opentelemetry.instrumentation.javaagent-instrumentation plugin
  add("codegen", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleBootstrap", "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations-support:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-extension-api:${versions.opentelemetryJavaagentAlpha}")
  add("muzzleTooling", "io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
}

tasks {
  compileJava {
    options.release.set(8)
  }

  assemble.dependsOn(shadowJar)
}

// muzzle {
//   pass {
//     group.set("org.apache.tomcat.embed")
//     module.set("tomcat-embed-core")
//     versions.set("[10,)")
//   }
// }
